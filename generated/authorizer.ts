/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/v1/authz/decisiontree": {
    /** Returns decision tree for given identity context. */
    post: operations["authorizer.decision_tree"];
  };
  "/api/v1/authz/is": {
    /** Determines if identity context is authorized to access the resource guarded by the given policy. */
    post: operations["authorizer.is"];
  };
  "/api/v1/authz/query": {
    /** Execute query. */
    post: operations["authorizer.query"];
  };
  "/api/v1/dir/identities": {
    /** Return user id for given user identity. */
    post: operations["directory.get_identity"];
  };
  "/api/v1/dir/users": {
    /** Returns the collection of users. */
    get: operations["directory.list_users"];
  };
  "/api/v1/dir/users/{id}": {
    /** Returns single user instance. */
    get: operations["directory.get_user"];
  };
  "/api/v1/dir/users/{id}/applications": {
    /** Returns the applications collection of given user. */
    get: operations["directory.list_user_applications"];
  };
  "/api/v1/dir/users/{id}/applications/{name}": {
    /** Remove application (name) from applications collection of given user. */
    delete: operations["directory.delete_user_application"];
  };
  "/api/v1/dir/users/{id}/applications/{name}/permissions": {
    /** Returns the application permissions collection of given user. */
    get: operations["directory.get_appl_permissions"];
    /** Set the application permission (name) for given user. */
    post: operations["directory.set_appl_permission"];
  };
  "/api/v1/dir/users/{id}/applications/{name}/permissions/{permission}": {
    /** Remove application permission (name) from given user their permissions collection. */
    delete: operations["directory.delete_appl_permission"];
  };
  "/api/v1/dir/users/{id}/applications/{name}/properties": {
    /** Returns the application properties collection of given user. */
    get: operations["directory.get_appl_properties"];
    /** Set application property (key=value) for given user. */
    post: operations["directory.set_appl_property"];
  };
  "/api/v1/dir/users/{id}/applications/{name}/properties/{key}": {
    /** Remove application property (key) from the given user their property collection. */
    delete: operations["directory.delete_appl_property"];
  };
  "/api/v1/dir/users/{id}/applications/{name}/roles": {
    /** Returns the application roles collection of given user. */
    get: operations["directory.get_appl_roles"];
    /** Set application role (name) for given user. */
    post: operations["directory.set_appl_role"];
  };
  "/api/v1/dir/users/{id}/applications/{name}/roles/{role}": {
    /** Remove application role (name) from given user their roles collection. */
    delete: operations["directory.delete_appl_role"];
  };
  "/api/v1/dir/users/{id}/attributes/permissions": {
    /** Returns the permissions collection of given user. */
    get: operations["directory.get_user_permissions"];
    /** Set the permission (name) for given user. */
    post: operations["directory.set_user_permission"];
  };
  "/api/v1/dir/users/{id}/attributes/permissions/{permission}": {
    /** Remove permission (name) from given user their permissions collection. */
    delete: operations["directory.delete_user_permission"];
  };
  "/api/v1/dir/users/{id}/attributes/properties": {
    /** Returns the properties collection of given user. */
    get: operations["directory.get_user_properties"];
    /** Set property (key=value) for given user. */
    post: operations["directory.set_user_property"];
  };
  "/api/v1/dir/users/{id}/attributes/properties/{key}": {
    /** Remove property (key) from the given user their property collection. */
    delete: operations["directory.delete_user_property"];
  };
  "/api/v1/dir/users/{id}/attributes/roles": {
    /** Returns the roles collection of given user. */
    get: operations["directory.get_user_roles"];
    /** Set role (name) for given user. */
    post: operations["directory.set_user_role"];
  };
  "/api/v1/dir/users/{id}/attributes/roles/{role}": {
    /** Remove role (name) from given user their roles collection. */
    delete: operations["directory.delete_user_role"];
  };
  "/api/v1/info": {
    /** Return endpoint versio information. */
    get: operations["info.info"];
  };
  "/api/v1/policy/modules/{id}": {
    /** Returns the module for a given policy. */
    get: operations["policy.get_module"];
  };
  "/api/v1/policy/policies": {
    /** Returns the list of policy bundle identifiers currently loaded within the authorizer instance. */
    get: operations["policy.list_policies"];
  };
  "/api/v1/policy/policies/{id}": {
    /** Returns the policies present within a given policy bundle. */
    get: operations["policy.get_policies"];
  };
}

export interface components {
  schemas: {
    protobufAny: {
      type_url?: string;
      value?: string;
    };
    /**
     * `NullValue` is a singleton enumeration to represent the null value for the
     * `Value` type union.
     *
     *  The JSON representation for `NullValue` is JSON `null`.
     *
     *  - NULL_VALUE: Null value.
     */
    protobufNullValue: "NULL_VALUE";
    rpcStatus: {
      code?: number;
      details?: components["schemas"]["protobufAny"][];
      message?: string;
    };
    v1AttrSet: {
      permissions?: string[];
      properties?: { [key: string]: unknown };
      roles?: string[];
    };
    v1BuildInfo: {
      arch?: string;
      commit?: string;
      date?: string;
      os?: string;
      version?: string;
    };
    v1CreateTenantResponse: {
      id?: string;
    };
    v1CreateUserResponse: {
      result?: components["schemas"]["v1User"];
    };
    v1Decision: {
      decision?: string;
      is?: boolean;
    };
    v1DecisionTreeOptions: {
      path_separator?: components["schemas"]["v1PathSeparator"];
    };
    v1DecisionTreeRequest: {
      identity_context?: components["schemas"]["v1IdentityContext"];
      options?: components["schemas"]["v1DecisionTreeOptions"];
      policy_context?: components["schemas"]["v1PolicyContext"];
      resource_context?: { [key: string]: unknown };
    };
    v1DecisionTreeResponse: {
      path?: { [key: string]: unknown };
      path_root?: string;
    };
    v1DeleteApplPermissionResponse: {
      result?: unknown;
    };
    v1DeleteApplPropertyResponse: {
      result?: unknown;
    };
    v1DeleteApplRoleResponse: {
      result?: unknown;
    };
    v1DeleteResourceResponse: {
      result?: unknown;
    };
    v1DeleteTenantResponse: {
      result?: unknown;
    };
    v1DeleteUserApplicationResponse: {
      result?: unknown;
    };
    v1DeleteUserPermissionResponse: {
      result?: unknown;
    };
    v1DeleteUserPropertyResponse: {
      result?: unknown;
    };
    v1DeleteUserResponse: {
      result?: unknown;
    };
    v1DeleteUserRoleResponse: {
      result?: unknown;
    };
    v1Fields: {
      mask?: string;
    };
    v1GetApplPermissionsResponse: {
      results?: string[];
    };
    v1GetApplPropertiesResponse: {
      results?: { [key: string]: unknown };
    };
    v1GetApplRolesResponse: {
      results?: string[];
    };
    v1GetIdentityRequest: {
      identity?: string;
    };
    v1GetIdentityResponse: {
      id?: string;
    };
    v1GetModuleResponse: {
      module?: components["schemas"]["v1Module"];
    };
    v1GetPoliciesResponse: {
      id?: string;
      name?: string;
      policies?: components["schemas"]["v1PolicyItem"][];
    };
    v1GetResourceResponse: {
      value?: { [key: string]: unknown };
    };
    v1GetUserPermissionsResponse: {
      results?: string[];
    };
    v1GetUserPropertiesResponse: {
      results?: { [key: string]: unknown };
    };
    v1GetUserResponse: {
      result?: components["schemas"]["v1User"];
    };
    v1GetUserRolesResponse: {
      results?: string[];
    };
    v1GetValueResponse: {
      value?: { [key: string]: unknown };
    };
    v1IdentityContext: {
      identity?: string;
      type?: components["schemas"]["v1IdentityType"];
    };
    v1IdentityKind:
      | "IDENTITY_KIND_UNKNOWN"
      | "IDENTITY_KIND_PID"
      | "IDENTITY_KIND_EMAIL"
      | "IDENTITY_KIND_USERNAME"
      | "IDENTITY_KIND_DN"
      | "IDENTITY_KIND_PHONE";
    v1IdentitySource: {
      kind?: components["schemas"]["v1IdentityKind"];
      provider?: string;
      verified?: boolean;
    };
    /**
     * Identity types, describes the payload type of the identity field inside the IdentityContext message.
     *
     *  - IDENTITY_TYPE_UNKNOWN: Unknown, value not set, requests will fail with identity type not set error.
     *  - IDENTITY_TYPE_NONE: None, no explicit identity context set, equals anonymous.
     *  - IDENTITY_TYPE_SUB: Sub(ject), identity field contains an oAUTH subject.
     *  - IDENTITY_TYPE_JWT: JWT, identity field contains a JWT access token.
     */
    v1IdentityType:
      | "IDENTITY_TYPE_UNKNOWN"
      | "IDENTITY_TYPE_NONE"
      | "IDENTITY_TYPE_SUB"
      | "IDENTITY_TYPE_JWT";
    v1InfoResponse: {
      build?: components["schemas"]["v1BuildInfo"];
      system?: components["schemas"]["v1SystemInfo"];
      version?: components["schemas"]["v1VersionInfo"];
    };
    v1IsRequest: {
      identity_context?: components["schemas"]["v1IdentityContext"];
      policy_context?: components["schemas"]["v1PolicyContext"];
      resource_context?: { [key: string]: unknown };
    };
    v1IsResponse: {
      decisions?: components["schemas"]["v1Decision"][];
    };
    v1ListPoliciesResponse: {
      results?: components["schemas"]["v1PolicyItem"][];
    };
    v1ListResourcesResponse: {
      results?: string[];
    };
    v1ListTenantsResponse: {
      results?: string[];
    };
    v1ListUserApplicationsResponse: {
      results?: string[];
    };
    v1ListUsersResponse: {
      page?: components["schemas"]["v1PaginationResponse"];
      results?: components["schemas"]["v1User"][];
    };
    v1LoadUsersResponse: {
      created?: number;
      deleted?: number;
      errors?: number;
      received?: number;
      updated?: number;
    };
    v1Metadata: {
      connection_id?: string;
      created_at?: string;
      deleted_at?: string;
      hash?: string;
      updated_at?: string;
    };
    v1Module: {
      content?: string;
      id?: string;
      name?: string;
      rules?: string[];
    };
    v1PaginationRequest: {
      size?: number;
      token?: string;
    };
    v1PaginationResponse: {
      next_token?: string;
      result_size?: number;
      total_size?: number;
    };
    v1PathSeparator:
      | "PATH_SEPARATOR_UNKNOWN"
      | "PATH_SEPARATOR_DOT"
      | "PATH_SEPARATOR_SLASH";
    v1PolicyContext: {
      decisions?: string[];
      id?: string;
      path?: string;
    };
    v1PolicyItem: {
      id?: string;
      name?: string;
    };
    v1QueryOptions: {
      instrument?: boolean;
      metrics?: boolean;
      trace?: components["schemas"]["v1TraceLevel"];
      trace_summary?: boolean;
    };
    v1QueryRequest: {
      identity_context?: components["schemas"]["v1IdentityContext"];
      input?: string;
      options?: components["schemas"]["v1QueryOptions"];
      policy_context?: components["schemas"]["v1PolicyContext"];
      query?: string;
      resource_context?: { [key: string]: unknown };
    };
    v1QueryResponse: {
      metrics?: { [key: string]: unknown };
      results?: { [key: string]: unknown }[];
      trace?: { [key: string]: unknown }[];
      trace_summary?: string[];
    };
    v1SetApplPermissionResponse: {
      permission?: string;
    };
    v1SetApplPermissionsResponse: {
      permissions?: string[];
    };
    v1SetApplPropertiesResponse: {
      properties?: { [key: string]: unknown };
    };
    v1SetApplPropertyResponse: {
      key?: string;
      value?: { [key: string]: unknown };
    };
    v1SetApplRoleResponse: {
      role?: string;
    };
    v1SetApplRolesResponse: {
      roles?: string[];
    };
    v1SetResourceResponse: {
      key?: string;
      value?: { [key: string]: unknown };
    };
    v1SetUserPermissionResponse: {
      permission?: string;
    };
    v1SetUserPermissionsResponse: {
      permissions?: string[];
    };
    v1SetUserPropertiesResponse: {
      properties?: { [key: string]: unknown };
    };
    v1SetUserPropertyResponse: {
      key?: string;
      value?: { [key: string]: unknown };
    };
    v1SetUserRoleResponse: {
      role?: string;
    };
    v1SetUserRolesResponse: {
      roles?: string[];
    };
    v1SystemInfo: {
      created_at?: string;
      instance_id?: string;
    };
    v1TraceLevel:
      | "TRACE_LEVEL_UNKNOWN"
      | "TRACE_LEVEL_OFF"
      | "TRACE_LEVEL_FULL"
      | "TRACE_LEVEL_NOTES"
      | "TRACE_LEVEL_FAILS";
    v1UpdateUserResponse: {
      result?: components["schemas"]["v1User"];
    };
    v1User: {
      applications?: { [key: string]: components["schemas"]["v1AttrSet"] };
      attributes?: components["schemas"]["v1AttrSet"];
      deleted?: boolean;
      display_name?: string;
      email?: string;
      enabled?: boolean;
      id?: string;
      identities?: { [key: string]: components["schemas"]["v1IdentitySource"] };
      metadata?: components["schemas"]["v1Metadata"];
      picture?: string;
    };
    v1UserExt: {
      applications?: { [key: string]: components["schemas"]["v1AttrSet"] };
      attributes?: components["schemas"]["v1AttrSet"];
      id?: string;
    };
    v1VersionInfo: {
      schema?: string;
      system?: number;
    };
  };
}

export interface operations {
  /** Returns decision tree for given identity context. */
  "authorizer.decision_tree": {
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1DecisionTreeResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["v1DecisionTreeRequest"];
      };
    };
  };
  /** Determines if identity context is authorized to access the resource guarded by the given policy. */
  "authorizer.is": {
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1IsResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["v1IsRequest"];
      };
    };
  };
  /** Execute query. */
  "authorizer.query": {
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1QueryResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["v1QueryRequest"];
      };
    };
  };
  /** Return user id for given user identity. */
  "directory.get_identity": {
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1GetIdentityResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["v1GetIdentityRequest"];
      };
    };
  };
  /** Returns the collection of users. */
  "directory.list_users": {
    parameters: {
      query: {
        "page.size"?: number;
        "page.token"?: string;
        "fields.mask"?: string;
        base?: boolean;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1ListUsersResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Returns single user instance. */
  "directory.get_user": {
    parameters: {
      path: {
        id: string;
      };
      query: {
        base?: boolean;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1GetUserResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Returns the applications collection of given user. */
  "directory.list_user_applications": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1ListUserApplicationsResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Remove application (name) from applications collection of given user. */
  "directory.delete_user_application": {
    parameters: {
      path: {
        id: string;
        name: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1DeleteUserApplicationResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Returns the application permissions collection of given user. */
  "directory.get_appl_permissions": {
    parameters: {
      path: {
        id: string;
        name: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1GetApplPermissionsResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Set the application permission (name) for given user. */
  "directory.set_appl_permission": {
    parameters: {
      path: {
        id: string;
        name: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1SetApplPermissionResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          permission?: string;
        };
      };
    };
  };
  /** Remove application permission (name) from given user their permissions collection. */
  "directory.delete_appl_permission": {
    parameters: {
      path: {
        id: string;
        name: string;
        permission: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1DeleteApplPermissionResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Returns the application properties collection of given user. */
  "directory.get_appl_properties": {
    parameters: {
      path: {
        id: string;
        name: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1GetApplPropertiesResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Set application property (key=value) for given user. */
  "directory.set_appl_property": {
    parameters: {
      path: {
        id: string;
        name: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1SetApplPropertyResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          key?: string;
          value?: { [key: string]: unknown };
        };
      };
    };
  };
  /** Remove application property (key) from the given user their property collection. */
  "directory.delete_appl_property": {
    parameters: {
      path: {
        id: string;
        name: string;
        key: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1DeleteApplPropertyResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Returns the application roles collection of given user. */
  "directory.get_appl_roles": {
    parameters: {
      path: {
        id: string;
        name: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1GetApplRolesResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Set application role (name) for given user. */
  "directory.set_appl_role": {
    parameters: {
      path: {
        id: string;
        name: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1SetApplRoleResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          role?: string;
        };
      };
    };
  };
  /** Remove application role (name) from given user their roles collection. */
  "directory.delete_appl_role": {
    parameters: {
      path: {
        id: string;
        name: string;
        role: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1DeleteApplRoleResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Returns the permissions collection of given user. */
  "directory.get_user_permissions": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1GetUserPermissionsResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Set the permission (name) for given user. */
  "directory.set_user_permission": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1SetUserPermissionResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          permission?: string;
        };
      };
    };
  };
  /** Remove permission (name) from given user their permissions collection. */
  "directory.delete_user_permission": {
    parameters: {
      path: {
        id: string;
        permission: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1DeleteUserPermissionResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Returns the properties collection of given user. */
  "directory.get_user_properties": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1GetUserPropertiesResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Set property (key=value) for given user. */
  "directory.set_user_property": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1SetUserPropertyResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          key?: string;
          value?: { [key: string]: unknown };
        };
      };
    };
  };
  /** Remove property (key) from the given user their property collection. */
  "directory.delete_user_property": {
    parameters: {
      path: {
        id: string;
        key: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1DeleteUserPropertyResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Returns the roles collection of given user. */
  "directory.get_user_roles": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1GetUserRolesResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Set role (name) for given user. */
  "directory.set_user_role": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1SetUserRoleResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          role?: string;
        };
      };
    };
  };
  /** Remove role (name) from given user their roles collection. */
  "directory.delete_user_role": {
    parameters: {
      path: {
        id: string;
        role: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1DeleteUserRoleResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Return endpoint versio information. */
  "info.info": {
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1InfoResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Returns the module for a given policy. */
  "policy.get_module": {
    parameters: {
      path: {
        id: string;
      };
      query: {
        policy_id?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1GetModuleResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Returns the list of policy bundle identifiers currently loaded within the authorizer instance. */
  "policy.list_policies": {
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1ListPoliciesResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Returns the policies present within a given policy bundle. */
  "policy.get_policies": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1GetPoliciesResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
}

export interface external {}
