/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/v1/account": {
    /** Returns account information of given user identity: account id, tenant membership and default tenant id. */
    get: operations["account.get_account"];
    /** Update account information of given user identity. */
    post: operations["account.update_account"];
  };
  "/api/v1/account/invites": {
    /** Returns tenant invitations collection for given user identity. */
    get: operations["account.list_invites"];
  };
  "/api/v1/account/signup": {
    /** Sign up for an Aserto account with the given email address. */
    post: operations["account.signup"];
  };
  "/api/v1/discovery/{policy_name}/{instance_label}/opa": {
    /** Calculates a json configuration file to be used by OPA's discovery plugin. */
    get: operations["policy.opa_instance_discovery"];
  };
  "/api/v1/info": {
    /** Return endpoint versio information. */
    get: operations["info.info"];
  };
  "/api/v1/onboarding/available/{name}": {
    /** Verifies if given tenant name is available. */
    get: operations["onboarding.tenant_available"];
  };
  "/api/v1/onboarding/claim": {
    /** Claim tenant name. */
    post: operations["onboarding.claim_tenant"];
  };
  "/api/v1/onboarding/invites": {
    /** Invite user to join aserto. */
    post: operations["onboarding.invite_user"];
  };
  "/api/v1/providers": {
    /** Returns the collection of providers. */
    get: operations["provider.list_providers"];
  };
  "/api/v1/providers/kinds": {
    /** Returns the collection of provider kinds (types). */
    get: operations["provider.list_provider_kinds"];
  };
  "/api/v1/providers/{id}": {
    /** Returns the meta describing of a provider. */
    get: operations["provider.get_provider"];
  };
  "/api/v1/registry/{connection_id}": {
    /** Lists all organizations available for a connection. */
    get: operations["registry.list_orgs"];
    /** Create an empty registry repository for a given registry connection instance. */
    post: operations["registry.create_registry_repo"];
  };
  "/api/v1/registry/{connection_id}/available/{repo.org}/{repo.name}": {
    /** Verifies if given RegistryRepo is available. */
    get: operations["registry.registry_repo_available"];
  };
  "/api/v1/registry/{connection_id}/clone": {
    /** Clones a repository from one registry to another. */
    post: operations["registry.clone_repo"];
  };
  "/api/v1/registry/{connection_id}/{org}": {
    /** Returns a list of RegistryRepo for a given registry connection and organization name. */
    get: operations["registry.list_registry_repos"];
  };
  "/api/v1/registry/{connection_id}/{repo.org}/{repo.name}": {
    /** Deletes a repository, including all its tags and images. */
    delete: operations["registry.delete_registry_repo"];
  };
  "/api/v1/registry/{connection_id}/{repo.org}/{repo.name}/digests": {
    /** Returns an array of digests for a registry repository. */
    get: operations["registry.list_digests"];
  };
  "/api/v1/registry/{connection_id}/{repo.org}/{repo.name}/tags": {
    /** Returns an array of tags for a registry repository. */
    get: operations["registry.list_tags"];
  };
  "/api/v1/registry/{connection_id}/{repo.org}/{repo.name}/tags/{tag}": {
    /** Returns a tag object with information about the tag. */
    get: operations["registry.get_tag"];
  };
  "/api/v1/registry/{connection_id}/{repo.org}/{repo.name}/tags/{tag}/valid_policy": {
    /** Verifies if given tag is a valid policy. */
    get: operations["registry.registry_is_valid_tag"];
  };
  "/api/v1/tenant/connections": {
    /** Returns the collection of connections for given tenant. */
    get: operations["connection.list_connections"];
    /** Creates a new connection instance of a given connection kind. */
    post: operations["connection.create_connection"];
  };
  "/api/v1/tenant/connections/available/{name}": {
    /** Verifies if given connection name is available. */
    get: operations["connection.connection_available"];
  };
  "/api/v1/tenant/connections/{connection.id}": {
    /** Update existing connection definition for the given connection id. */
    put: operations["connection.update_connection"];
  };
  "/api/v1/tenant/connections/{id}": {
    /** Returns the connection definition for the given connection id. */
    get: operations["connection.get_connection"];
    /** Removes the connection definition for the given connection id. */
    delete: operations["connection.delete_connection"];
  };
  "/api/v1/tenant/connections/{id}/verify": {
    /** Verifiy the configuration settings for the given connection id. */
    post: operations["connection.verify_connection"];
  };
  "/api/v1/tenant/connections/{id}/{secret_key}/rotate": {
    /** Rotate a generated secret value. */
    put: operations["connection.rotate_secret"];
  };
  "/api/v1/tenant/policies": {
    /** List policy references. */
    get: operations["policy.list_policy_references"];
    /** Create policy reference. */
    post: operations["policy.create_policy_reference"];
  };
  "/api/v1/tenant/policies/{id}": {
    /** Remove policy reference. */
    delete: operations["policy.delete_policy_reference"];
  };
  "/api/v1/tenant/policies/{policy_id}/opa/discovery": {
    /** Calculates a json configuration file to be used by OPA's discovery plugin. */
    get: operations["policy.opa_discovery"];
  };
  "/api/v1/tenant/policies/{policy_ref.id}": {
    /** Update a policy reference. */
    patch: operations["policy.update_policy_reference"];
  };
  "/api/v1/tenant/policybuilder": {
    /** List policy builders */
    get: operations["policy.list_policy_builders"];
    /** Create policy builder. */
    post: operations["policy.create_policy_builder"];
  };
  "/api/v1/tenant/policybuilder/{id}": {
    /** Remove policy builder. */
    delete: operations["policy.delete_policy_builder"];
  };
  "/api/v1/tenant/profile": {
    /** Returns the tenant profile. */
    get: operations["profile.get_profile"];
  };
  "/api/v1/tenant/profile/invites": {
    /** Returns collection of invitation for given tenant. */
    get: operations["profile.get_invites"];
    /** Invite user to tenant. */
    post: operations["profile.invite_user"];
  };
  "/api/v1/tenant/profile/invites/{id}": {
    /** Respond to tenant invitation. */
    post: operations["profile.respond_to_invite"];
  };
  "/api/v1/tenant/profile/members/{account_id}": {
    /** Remove member from tenant. */
    delete: operations["profile.remove_member"];
  };
  "/api/v1/tenant/scc/{connection_id}/orgs": {
    /** Returns the collection organizations for a given SCC connection. */
    get: operations["scc.list_orgs"];
  };
  "/api/v1/tenant/scc/{connection_id}/profile": {
    /** Returns profile information for a given SCC connection instance. */
    get: operations["scc.get_profile"];
  };
  "/api/v1/tenant/scc/{connection_id}/repos/{org}": {
    /** Returns the collection repostories for a given SCC connection instance. */
    get: operations["scc.list_repos"];
    /** Create a new source repository instance for a given connection instance. */
    post: operations["scc.create_repo"];
  };
  "/api/v1/tenant/scc/{connection_id}/repos/{org}/{name}": {
    /** Gets details for a source code repository. */
    get: operations["scc.get_repo"];
  };
  "/api/v1/tenant/scc/{connection_id}/repos/{org}/{repo}/connected": {
    /** Verify if the given repository is connected. */
    get: operations["scc.is_repo_connected"];
  };
  "/api/v1/tenant/scc/{connection_id}/templates": {
    /** Returns the collection template repostories for a given SCC connection instance. */
    get: operations["scc.list_templates"];
  };
  "/api/v2/accounts": {
    /** Delete account. */
    delete: operations["tenant.delete_account"];
  };
  "/api/v2/policies": {
    /** List policies. */
    get: operations["policy.list_policy"];
    /** Create a policy. */
    post: operations["policy.create_policy"];
  };
  "/api/v2/policies/available/{name}": {
    /** Verifies if given policy name is available. */
    get: operations["policy.policy_available"];
  };
  "/api/v2/policies/{id}": {
    /** Get policy by its ID. */
    get: operations["policy.get_policy"];
    /** Remove policy. */
    delete: operations["policy.delete_policy"];
  };
  "/api/v2/policies/{policy.id}": {
    /** Update a policy. */
    patch: operations["policy.update_policy"];
  };
  "/api/v2/policystate": {
    /** Set policy state by its ID. */
    put: operations["policystate.set_policy_state"];
  };
  "/api/v2/policystate/{policy_id}": {
    /** Get policy state by its ID. */
    get: operations["policystate.get_policy_state"];
  };
  "/api/v2/tenants": {
    /** Delete tenant. */
    delete: operations["tenant.delete_tenant"];
  };
}

export interface components {
  schemas: {
    /**
     * `Any` contains an arbitrary serialized protocol buffer message along with a
     * URL that describes the type of the serialized message.
     *
     * Protobuf library provides support to pack/unpack Any values in the form
     * of utility functions or additional generated methods of the Any type.
     *
     * Example 1: Pack and unpack a message in C++.
     *
     *     Foo foo = ...;
     *     Any any;
     *     any.PackFrom(foo);
     *     ...
     *     if (any.UnpackTo(&foo)) {
     *       ...
     *     }
     *
     * Example 2: Pack and unpack a message in Java.
     *
     *     Foo foo = ...;
     *     Any any = Any.pack(foo);
     *     ...
     *     if (any.is(Foo.class)) {
     *       foo = any.unpack(Foo.class);
     *     }
     *
     *  Example 3: Pack and unpack a message in Python.
     *
     *     foo = Foo(...)
     *     any = Any()
     *     any.Pack(foo)
     *     ...
     *     if any.Is(Foo.DESCRIPTOR):
     *       any.Unpack(foo)
     *       ...
     *
     *  Example 4: Pack and unpack a message in Go
     *
     *      foo := &pb.Foo{...}
     *      any, err := anypb.New(foo)
     *      if err != nil {
     *        ...
     *      }
     *      ...
     *      foo := &pb.Foo{}
     *      if err := any.UnmarshalTo(foo); err != nil {
     *        ...
     *      }
     *
     * The pack methods provided by protobuf library will by default use
     * 'type.googleapis.com/full.type.name' as the type URL and the unpack
     * methods only use the fully qualified type name after the last '/'
     * in the type URL, for example "foo.bar.com/x/y.z" will yield type
     * name "y.z".
     *
     *
     * JSON
     * ====
     * The JSON representation of an `Any` value uses the regular
     * representation of the deserialized, embedded message, with an
     * additional field `@type` which contains the type URL. Example:
     *
     *     package google.profile;
     *     message Person {
     *       string first_name = 1;
     *       string last_name = 2;
     *     }
     *
     *     {
     *       "@type": "type.googleapis.com/google.profile.Person",
     *       "firstName": <string>,
     *       "lastName": <string>
     *     }
     *
     * If the embedded message type is well-known and has a custom JSON
     * representation, that representation will be embedded adding a field
     * `value` which holds the custom JSON in addition to the `@type`
     * field. Example (for message [google.protobuf.Duration][]):
     *
     *     {
     *       "@type": "type.googleapis.com/google.protobuf.Duration",
     *       "value": "1.212s"
     *     }
     */
    protobufAny: {
      /**
       * A URL/resource name that uniquely identifies the type of the serialized
       * protocol buffer message. This string must contain at least
       * one "/" character. The last segment of the URL's path must represent
       * the fully qualified name of the type (as in
       * `path/google.protobuf.Duration`). The name should be in a canonical form
       * (e.g., leading "." is not accepted).
       *
       * In practice, teams usually precompile into the binary all types that they
       * expect it to use in the context of Any. However, for URLs which use the
       * scheme `http`, `https`, or no scheme, one can optionally set up a type
       * server that maps type URLs to message definitions as follows:
       *
       * * If no scheme is provided, `https` is assumed.
       * * An HTTP GET on the URL must yield a [google.protobuf.Type][]
       *   value in binary format, or produce an error.
       * * Applications are allowed to cache lookup results based on the
       *   URL, or have them precompiled into a binary to avoid any
       *   lookup. Therefore, binary compatibility needs to be preserved
       *   on changes to types. (Use versioned type names to manage
       *   breaking changes.)
       *
       * Note: this functionality is not currently available in the official
       * protobuf release, and it is not used for type URLs beginning with
       * type.googleapis.com.
       *
       * Schemes other than `http`, `https` (or the empty scheme) might be
       * used with implementation specific semantics.
       */
      type_url?: string;
      /** Must be a valid serialized protocol buffer of the above specified type. */
      value?: string;
    };
    /**
     * `NullValue` is a singleton enumeration to represent the null value for the
     * `Value` type union.
     *
     *  The JSON representation for `NullValue` is JSON `null`.
     *
     *  - NULL_VALUE: Null value.
     */
    protobufNullValue: "NULL_VALUE";
    /**
     * The `Status` type defines a logical error model that is suitable for
     * different programming environments, including REST APIs and RPC APIs. It is
     * used by [gRPC](https://github.com/grpc). Each `Status` message contains
     * three pieces of data: error code, error message, and error details.
     *
     * You can find out more about this error model and how to work with it in the
     * [API Design Guide](https://cloud.google.com/apis/design/errors).
     */
    rpcStatus: {
      /** The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code]. */
      code?: number;
      /**
       * A list of messages that carry the error details.  There is a common set of
       * message types for APIs to use.
       */
      details?: components["schemas"]["protobufAny"][];
      /**
       * A developer-facing error message, which should be in English. Any
       * user-facing error message should be localized and sent in the
       * [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
       */
      message?: string;
    };
    v1Account: {
      default_tenant?: string;
      id?: string;
      personal_tenant?: components["schemas"]["v1Tenant"];
      registration_date?: string;
      tenants?: components["schemas"]["v1Tenant"][];
    };
    v1BuildInfo: {
      arch?: string;
      commit?: string;
      date?: string;
      os?: string;
      version?: string;
    };
    v1ClaimTenantRequest: {
      default_artifacts?: boolean;
      name?: string;
      personal?: boolean;
    };
    v1ClaimTenantResponse: {
      id?: string;
    };
    v1CloneRepoResponse: { [key: string]: unknown };
    v1ConfigElement: {
      description?: string;
      generated?: boolean;
      id?: number;
      json_schema?: string;
      kind?: components["schemas"]["v1ConfigElementKind"];
      mode?: components["schemas"]["v1DisplayMode"];
      name?: string;
      read_only?: boolean;
      type?: components["schemas"]["v1ConfigElementType"];
      usage?: string;
    };
    v1ConfigElementKind:
      | "CONFIG_ELEMENT_KIND_UNKNOWN"
      | "CONFIG_ELEMENT_KIND_ATTRIBUTE"
      | "CONFIG_ELEMENT_KIND_SECRET"
      | "CONFIG_ELEMENT_KIND_CERTIFICATE";
    v1ConfigElementType:
      | "CONFIG_ELEMENT_TYPE_UNKNOWN"
      | "CONFIG_ELEMENT_TYPE_STRING"
      | "CONFIG_ELEMENT_TYPE_INTEGER"
      | "CONFIG_ELEMENT_TYPE_BOOLEAN"
      | "CONFIG_ELEMENT_TYPE_JSON";
    v1Connection: {
      config?: { [key: string]: unknown };
      description?: string;
      id?: string;
      kind?: components["schemas"]["v1ProviderKind"];
      last_verification_at?: string;
      metadata?: components["schemas"]["v1Metadata"];
      name?: string;
      provider_id?: string;
      system?: boolean;
      verified?: boolean;
    };
    v1ConnectionAvailableResponse: {
      availability?: components["schemas"]["v1NameAvailability"];
      reason?: string;
    };
    v1ConnectionType:
      | "CONNECTION_TYPE_UNKNOWN"
      | "CONNECTION_TYPE_SIMPLE"
      | "CONNECTION_TYPE_OAUTH";
    v1CreateConnectionResponse: {
      id?: string;
    };
    v1CreatePolicyBuilderResponse: {
      id?: string;
    };
    v1CreatePolicyRefResponse: {
      id?: string;
    };
    v1CreateRegistryRepoResponse: { [key: string]: unknown };
    v1CreateRepoResponse: { [key: string]: unknown };
    v1DeleteConnectionResponse: {
      results?: unknown;
    };
    v1DeletePolicyBuilderResponse: {
      result?: unknown;
    };
    v1DeletePolicyRefResponse: {
      result?: unknown;
    };
    v1DeleteRegistryRepoResponse: { [key: string]: unknown };
    v1DisplayMode:
      | "DISPLAY_MODE_UNKNOWN"
      | "DISPLAY_MODE_NORMAL"
      | "DISPLAY_MODE_MASKED"
      | "DISPLAY_MODE_HIDDEN";
    v1Fields: {
      mask?: string;
    };
    v1GetAccountResponse: {
      result?: components["schemas"]["v1Account"];
    };
    v1GetConnectionResponse: {
      result?: components["schemas"]["v1Connection"];
    };
    v1GetInvitesResponse: {
      invites?: components["schemas"]["v1Invite"][];
    };
    v1GetProfileResponse: {
      repos?: components["schemas"]["v1Repo"][];
      tenant?: components["schemas"]["v1Tenant"];
      username?: string;
    };
    v1GetProviderResponse: {
      results?: components["schemas"]["v1Provider"][];
    };
    v1GetRegistryRepoTagResponse: {
      tag?: components["schemas"]["v1RegistryRepoTag"];
    };
    v1GetRepoResponse: {
      repo?: components["schemas"]["v1Repo"];
    };
    v1InfoResponse: {
      build?: components["schemas"]["v1BuildInfo"];
      system?: components["schemas"]["v1SystemInfo"];
      version?: components["schemas"]["v1VersionInfo"];
    };
    v1Invite: {
      created_at?: string;
      email?: string;
      id?: string;
      invited_by?: string;
      responded_at?: string;
      role?: string;
      status?: components["schemas"]["v1InviteStatus"];
    };
    v1InviteStatus:
      | "INVITE_STATUS_UNKNOWN"
      | "INVITE_STATUS_ACCEPTED"
      | "INVITE_STATUS_DECLINED"
      | "INVITE_STATUS_EXPIRED"
      | "INVITE_STATUS_CANCELED";
    v1InviteUserRequest: {
      account_id?: string;
      email?: string;
      role?: string;
    };
    v1InviteUserResponse: {
      id?: string;
    };
    v1IsRepoConnectedResponse: {
      connected?: boolean;
    };
    v1ListConnectionsResponse: {
      results?: components["schemas"]["v1Connection"][];
    };
    v1ListInvitesResponse: {
      results?: components["schemas"]["v1TenantInvite"][];
    };
    v1ListOrgResponse: {
      organizations?: components["schemas"]["v1SccOrg"][];
      orgs?: string[];
    };
    v1ListOrgsResponse: {
      orgs?: string[];
      page?: components["schemas"]["v1PaginationResponse"];
    };
    v1ListPolicyBuildersResponse: {
      results?: components["schemas"]["v1PolicyBuilder"][];
    };
    v1ListPolicyRefsResponse: {
      results?: components["schemas"]["v1PolicyRef"][];
    };
    v1ListProviderKindsResponse: {
      results?: string[];
    };
    v1ListProvidersResponse: {
      results?: components["schemas"]["v1Provider"][];
    };
    v1ListRegistryRepoDigestsResponse: {
      digests?: components["schemas"]["v1RegistryRepoDigest"][];
      page?: components["schemas"]["v1PaginationResponse"];
    };
    v1ListRegistryRepoTagsResponse: {
      page?: components["schemas"]["v1PaginationResponse"];
      tags?: components["schemas"]["v1RegistryRepoTag"][];
    };
    v1ListRegistryReposResponse: {
      page?: components["schemas"]["v1PaginationResponse"];
      registry_repos?: components["schemas"]["v1RegistryRepo"][];
    };
    v1ListRepoResponse: {
      repos?: components["schemas"]["v1Repo"][];
    };
    v1ListTemplatesResponse: {
      repos?: components["schemas"]["v1Repo"][];
    };
    v1Metadata: {
      connection_id?: string;
      created_at?: string;
      deleted_at?: string;
      hash?: string;
      updated_at?: string;
    };
    v1NameAvailability:
      | "NAME_AVAILABILITY_UNKNOWN"
      | "NAME_AVAILABILITY_AVAILABLE"
      | "NAME_AVAILABILITY_UNAVAILABLE"
      | "NAME_AVAILABILITY_INVALID"
      | "NAME_AVAILABILITY_PROFANE"
      | "NAME_AVAILABILITY_RESERVED";
    v1OPAConfig: {
      discovery?: { [key: string]: unknown };
    };
    v1OPADiscoveryResponse: {
      opa?: components["schemas"]["v1OPAConfig"];
    };
    v1OPAInstanceDiscoveryResponse: {
      opa?: components["schemas"]["v1OPAConfig"];
    };
    v1PaginationRequest: {
      size?: number;
      token?: string;
    };
    v1PaginationResponse: {
      next_token?: string;
      result_size?: number;
      total_size?: number;
    };
    v1PolicyBuilder: {
      id?: string;
      registry_connection_id?: string;
      registry_org?: string;
      registry_repo?: string;
      scc_connection_id?: string;
      scc_org?: string;
      scc_repo?: string;
    };
    v1PolicyRef: {
      connection_id?: string;
      decision_logging?: boolean;
      id?: string;
      name?: string;
      registry_connection_id?: string;
      registry_image?: string;
      registry_org?: string;
      registry_tag?: string;
      source_name?: string;
      source_url?: string;
    };
    v1Provider: {
      config?: components["schemas"]["v1ConfigElement"][];
      connection_type?: components["schemas"]["v1ConnectionType"];
      description?: string;
      display_attributes?: { [key: string]: string };
      id?: string;
      kind?: components["schemas"]["v1ProviderKind"];
      name?: string;
    };
    v1ProviderKind:
      | "PROVIDER_KIND_UNKNOWN"
      | "PROVIDER_KIND_IDP"
      | "PROVIDER_KIND_SCC"
      | "PROVIDER_KIND_POLICY_REGISTRY"
      | "PROVIDER_KIND_AUTHORIZER"
      | "PROVIDER_KIND_DECISION_LOGS"
      | "PROVIDER_KIND_DIRECTORY"
      | "PROVIDER_KIND_DISCOVERY"
      | "PROVIDER_KIND_EDGE_AUTHORIZER";
    v1RegistryRepo: {
      name?: string;
      org?: string;
    };
    v1RegistryRepoAnnotation: {
      key?: string;
      value?: string;
    };
    v1RegistryRepoAvailableResponse: {
      availability?: components["schemas"]["v1NameAvailability"];
      reason?: string;
    };
    v1RegistryRepoDigest: {
      created_at?: string;
      digest?: string;
      tags?: string[];
    };
    v1RegistryRepoTag: {
      annotations?: components["schemas"]["v1RegistryRepoAnnotation"][];
      created_at?: string;
      digest?: string;
      name?: string;
      size?: string;
    };
    v1RemoveMemberResponse: { [key: string]: unknown };
    v1Repo: {
      ci_url?: string;
      name?: string;
      org?: string;
      url?: string;
    };
    v1RespondToInviteResponse: { [key: string]: unknown };
    v1RotateSecretResponse: {
      result?: components["schemas"]["v1Connection"];
    };
    v1SccOrg: {
      id?: string;
      name?: string;
    };
    v1SignupAccountRequest: {
      email?: string;
      recaptcha?: string;
    };
    v1SignupAccountResponse: { [key: string]: unknown };
    v1SystemInfo: {
      created_at?: string;
      instance_id?: string;
    };
    v1Tenant: {
      connections?: components["schemas"]["v1Connection"][];
      id?: string;
      max_hosted_instances?: number;
      members?: components["schemas"]["v1TenantMember"][];
      name?: string;
      personal?: boolean;
    };
    v1TenantAvailability:
      | "TENANT_AVAILABILITY_UNKNOWN"
      | "TENANT_AVAILABILITY_AVAILABLE"
      | "TENANT_AVAILABILITY_UNAVAILABLE"
      | "TENANT_AVAILABILITY_INVALID"
      | "TENANT_AVAILABILITY_PROFANE"
      | "TENANT_AVAILABILITY_RESERVED"
      | "TENANT_AVAILABILITY_MARKED_DELETED";
    v1TenantAvailableResponse: {
      availability?: components["schemas"]["v1TenantAvailability"];
      reason?: string;
    };
    v1TenantInvite: {
      invite?: components["schemas"]["v1Invite"];
      tenant?: components["schemas"]["v1Tenant"];
    };
    v1TenantMember: {
      id?: string;
    };
    v1UpdateAccountResponse: { [key: string]: unknown };
    v1UpdateConnectionResponse: {
      id?: string;
    };
    v1UpdatePolicyRefResponse: {
      results?: unknown;
    };
    v1ValidPolicyRegistryRepoTagResponse: { [key: string]: unknown };
    v1VerifyConnectionResponse: {
      status?: components["schemas"]["rpcStatus"];
    };
    v1VersionInfo: {
      schema?: string;
      system?: number;
    };
    v2CreateInstanceResponse: {
      instance?: components["schemas"]["v2Instance"];
    };
    v2CreatePolicyResponse: {
      policy?: components["schemas"]["v2Policy"];
    };
    v2CreateRepositoryResponse: {
      repository?: components["schemas"]["v2Repository"];
    };
    v2CreateSourceResponse: {
      source?: components["schemas"]["v2Source"];
    };
    v2DeleteAccountResponse: { [key: string]: unknown };
    v2DeleteInstanceResponse: { [key: string]: unknown };
    v2DeletePolicyResponse: { [key: string]: unknown };
    v2DeleteRepositoryResponse: { [key: string]: unknown };
    v2DeleteSourceResponse: { [key: string]: unknown };
    v2DeleteTenantResponse: { [key: string]: unknown };
    v2GetPolicyResponse: {
      policy?: components["schemas"]["v2Policy"];
    };
    v2GetPolicyStateResponse: {
      state?: components["schemas"]["v2PolicyState"];
    };
    v2GetRepositoryResponse: {
      repository?: components["schemas"]["v2Repository"];
    };
    v2GetSourceResponse: {
      source?: components["schemas"]["v2Source"];
    };
    v2Instance: {
      created_at?: string;
      decision_logging?: boolean;
      instance_type: components["schemas"]["v2InstanceType"];
      label: string;
      policy_id?: string;
      tag: string;
      updated_at?: string;
      version_hash?: string;
    };
    v2InstanceType:
      | "INSTANCE_TYPE_UNKNOWN"
      | "INSTANCE_TYPE_HOSTED"
      | "INSTANCE_TYPE_EDGE_AUTHORIZER";
    v2ListInstanceResponse: {
      page?: components["schemas"]["v1PaginationResponse"];
      result?: components["schemas"]["v2Instance"][];
    };
    v2ListPolicyFilter: {
      name_equals?: string;
      name_starts_with?: string;
    };
    v2ListPolicyResponse: {
      page?: components["schemas"]["v1PaginationResponse"];
      results?: components["schemas"]["v2Policy"][];
    };
    v2Policy: {
      created_at?: string;
      id?: string;
      name: string;
      updated_at?: string;
      version_hash?: string;
    };
    v2PolicyNameAvailableResponse: {
      availability?: components["schemas"]["v1NameAvailability"];
      reason?: string;
    };
    v2PolicyState: {
      instance?: components["schemas"]["v2Instance"][];
      policy?: components["schemas"]["v2Policy"];
      repository?: components["schemas"]["v2Repository"];
      source?: components["schemas"]["v2Source"];
    };
    v2Repository: {
      connection_id: string;
      created_at?: string;
      org: string;
      policy_id?: string;
      repo: string;
      updated_at?: string;
      version_hash?: string;
    };
    v2SetPolicyStateResponse: {
      state?: components["schemas"]["v2PolicyState"];
    };
    v2Source: {
      connection_id: string;
      created_at?: string;
      org: string;
      policy_id?: string;
      repo: string;
      updated_at?: string;
      version_hash?: string;
    };
    v2UpdateInstanceResponse: {
      instance?: components["schemas"]["v2Instance"];
    };
    v2UpdatePolicyResponse: {
      policy?: components["schemas"]["v2Policy"];
    };
    v2UpdateRepositoryResponse: {
      repository?: components["schemas"]["v2Repository"];
    };
    v2UpdateSourceResponse: {
      source?: components["schemas"]["v2Source"];
    };
  };
}

export interface operations {
  /** Returns account information of given user identity: account id, tenant membership and default tenant id. */
  "account.get_account": {
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1GetAccountResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Update account information of given user identity. */
  "account.update_account": {
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1UpdateAccountResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["v1Account"];
      };
    };
  };
  /** Returns tenant invitations collection for given user identity. */
  "account.list_invites": {
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1ListInvitesResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Sign up for an Aserto account with the given email address. */
  "account.signup": {
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1SignupAccountResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["v1SignupAccountRequest"];
      };
    };
  };
  /** Calculates a json configuration file to be used by OPA's discovery plugin. */
  "policy.opa_instance_discovery": {
    parameters: {
      path: {
        policy_name: string;
        instance_label: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1OPAInstanceDiscoveryResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Return endpoint versio information. */
  "info.info": {
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1InfoResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Verifies if given tenant name is available. */
  "onboarding.tenant_available": {
    parameters: {
      path: {
        name: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1TenantAvailableResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Claim tenant name. */
  "onboarding.claim_tenant": {
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1ClaimTenantResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["v1ClaimTenantRequest"];
      };
    };
  };
  /** Invite user to join aserto. */
  "onboarding.invite_user": {
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1InviteUserResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["v1InviteUserRequest"];
      };
    };
  };
  /** Returns the collection of providers. */
  "provider.list_providers": {
    parameters: {
      query: {
        kind?:
          | "PROVIDER_KIND_UNKNOWN"
          | "PROVIDER_KIND_IDP"
          | "PROVIDER_KIND_SCC"
          | "PROVIDER_KIND_POLICY_REGISTRY"
          | "PROVIDER_KIND_AUTHORIZER"
          | "PROVIDER_KIND_DECISION_LOGS"
          | "PROVIDER_KIND_DIRECTORY"
          | "PROVIDER_KIND_DISCOVERY"
          | "PROVIDER_KIND_EDGE_AUTHORIZER";
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1ListProvidersResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Returns the collection of provider kinds (types). */
  "provider.list_provider_kinds": {
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1ListProviderKindsResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Returns the meta describing of a provider. */
  "provider.get_provider": {
    parameters: {
      path: {
        id: string;
      };
      query: {
        kind?:
          | "PROVIDER_KIND_UNKNOWN"
          | "PROVIDER_KIND_IDP"
          | "PROVIDER_KIND_SCC"
          | "PROVIDER_KIND_POLICY_REGISTRY"
          | "PROVIDER_KIND_AUTHORIZER"
          | "PROVIDER_KIND_DECISION_LOGS"
          | "PROVIDER_KIND_DIRECTORY"
          | "PROVIDER_KIND_DISCOVERY"
          | "PROVIDER_KIND_EDGE_AUTHORIZER";
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1GetProviderResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Lists all organizations available for a connection. */
  "registry.list_orgs": {
    parameters: {
      path: {
        connection_id: string;
      };
      query: {
        "page.size"?: number;
        "page.token"?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1ListOrgsResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Create an empty registry repository for a given registry connection instance. */
  "registry.create_registry_repo": {
    parameters: {
      path: {
        connection_id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1CreateRegistryRepoResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          repo?: components["schemas"]["v1RegistryRepo"];
        };
      };
    };
  };
  /** Verifies if given RegistryRepo is available. */
  "registry.registry_repo_available": {
    parameters: {
      path: {
        connection_id: string;
        "repo.org": string;
        "repo.name": string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1RegistryRepoAvailableResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Clones a repository from one registry to another. */
  "registry.clone_repo": {
    parameters: {
      path: {
        connection_id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1CloneRepoResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          destination_connection_id?: string;
          destination_org?: string;
          destination_repo?: string;
          destination_tag?: string;
          source_org?: string;
          source_repo?: string;
          source_tag?: string;
        };
      };
    };
  };
  /** Returns a list of RegistryRepo for a given registry connection and organization name. */
  "registry.list_registry_repos": {
    parameters: {
      path: {
        connection_id: string;
        org: string;
      };
      query: {
        "page.size"?: number;
        "page.token"?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1ListRegistryReposResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Deletes a repository, including all its tags and images. */
  "registry.delete_registry_repo": {
    parameters: {
      path: {
        connection_id: string;
        "repo.org": string;
        "repo.name": string;
      };
      query: {
        tag?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1DeleteRegistryRepoResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Returns an array of digests for a registry repository. */
  "registry.list_digests": {
    parameters: {
      path: {
        connection_id: string;
        "repo.org": string;
        "repo.name": string;
      };
      query: {
        "page.size"?: number;
        "page.token"?: string;
        deep?: boolean;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1ListRegistryRepoDigestsResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Returns an array of tags for a registry repository. */
  "registry.list_tags": {
    parameters: {
      path: {
        connection_id: string;
        "repo.org": string;
        "repo.name": string;
      };
      query: {
        "page.size"?: number;
        "page.token"?: string;
        deep?: boolean;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1ListRegistryRepoTagsResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Returns a tag object with information about the tag. */
  "registry.get_tag": {
    parameters: {
      path: {
        connection_id: string;
        "repo.org": string;
        "repo.name": string;
        tag: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1GetRegistryRepoTagResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Verifies if given tag is a valid policy. */
  "registry.registry_is_valid_tag": {
    parameters: {
      path: {
        connection_id: string;
        "repo.org": string;
        "repo.name": string;
        tag: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1ValidPolicyRegistryRepoTagResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Returns the collection of connections for given tenant. */
  "connection.list_connections": {
    parameters: {
      query: {
        kind?:
          | "PROVIDER_KIND_UNKNOWN"
          | "PROVIDER_KIND_IDP"
          | "PROVIDER_KIND_SCC"
          | "PROVIDER_KIND_POLICY_REGISTRY"
          | "PROVIDER_KIND_AUTHORIZER"
          | "PROVIDER_KIND_DECISION_LOGS"
          | "PROVIDER_KIND_DIRECTORY"
          | "PROVIDER_KIND_DISCOVERY"
          | "PROVIDER_KIND_EDGE_AUTHORIZER";
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1ListConnectionsResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Creates a new connection instance of a given connection kind. */
  "connection.create_connection": {
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1CreateConnectionResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["v1Connection"];
      };
    };
  };
  /** Verifies if given connection name is available. */
  "connection.connection_available": {
    parameters: {
      path: {
        name: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1ConnectionAvailableResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Update existing connection definition for the given connection id. */
  "connection.update_connection": {
    parameters: {
      path: {
        "connection.id": string;
      };
      query: {
        force?: boolean;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1UpdateConnectionResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["v1Connection"];
      };
    };
  };
  /** Returns the connection definition for the given connection id. */
  "connection.get_connection": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1GetConnectionResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Removes the connection definition for the given connection id. */
  "connection.delete_connection": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1DeleteConnectionResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Verifiy the configuration settings for the given connection id. */
  "connection.verify_connection": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1VerifyConnectionResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Rotate a generated secret value. */
  "connection.rotate_secret": {
    parameters: {
      path: {
        id: string;
        secret_key: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1RotateSecretResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** List policy references. */
  "policy.list_policy_references": {
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1ListPolicyRefsResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Create policy reference. */
  "policy.create_policy_reference": {
    parameters: {
      query: {
        force_reconnect?: boolean;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1CreatePolicyRefResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["v1PolicyRef"];
      };
    };
  };
  /** Remove policy reference. */
  "policy.delete_policy_reference": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1DeletePolicyRefResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Calculates a json configuration file to be used by OPA's discovery plugin. */
  "policy.opa_discovery": {
    parameters: {
      path: {
        policy_id: string;
      };
      query: {
        use_tags?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1OPADiscoveryResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Update a policy reference. */
  "policy.update_policy_reference": {
    parameters: {
      path: {
        "policy_ref.id": string;
      };
      query: {
        "update_mask.mask"?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1UpdatePolicyRefResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["v1PolicyRef"];
      };
    };
  };
  /** List policy builders */
  "policy.list_policy_builders": {
    parameters: {
      query: {
        registry_repo?: string;
        registry_org?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1ListPolicyBuildersResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Create policy builder. */
  "policy.create_policy_builder": {
    parameters: {
      query: {
        force_reconnect?: boolean;
        workflow_file_name?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1CreatePolicyBuilderResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["v1PolicyBuilder"];
      };
    };
  };
  /** Remove policy builder. */
  "policy.delete_policy_builder": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1DeletePolicyBuilderResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Returns the tenant profile. */
  "profile.get_profile": {
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1GetProfileResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Returns collection of invitation for given tenant. */
  "profile.get_invites": {
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1GetInvitesResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Invite user to tenant. */
  "profile.invite_user": {
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1InviteUserResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["v1InviteUserRequest"];
      };
    };
  };
  /** Respond to tenant invitation. */
  "profile.respond_to_invite": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1RespondToInviteResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          status?: components["schemas"]["v1InviteStatus"];
        };
      };
    };
  };
  /** Remove member from tenant. */
  "profile.remove_member": {
    parameters: {
      path: {
        account_id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1RemoveMemberResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Returns the collection organizations for a given SCC connection. */
  "scc.list_orgs": {
    parameters: {
      path: {
        connection_id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1ListOrgResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Returns profile information for a given SCC connection instance. */
  "scc.get_profile": {
    parameters: {
      path: {
        connection_id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1GetProfileResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Returns the collection repostories for a given SCC connection instance. */
  "scc.list_repos": {
    parameters: {
      path: {
        connection_id: string;
        org: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1ListRepoResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Create a new source repository instance for a given connection instance. */
  "scc.create_repo": {
    parameters: {
      path: {
        connection_id: string;
        org: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1CreateRepoResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          name?: string;
          template?: string;
        };
      };
    };
  };
  /** Gets details for a source code repository. */
  "scc.get_repo": {
    parameters: {
      path: {
        connection_id: string;
        org: string;
        name: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1GetRepoResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Verify if the given repository is connected. */
  "scc.is_repo_connected": {
    parameters: {
      path: {
        connection_id: string;
        org: string;
        repo: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1IsRepoConnectedResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Returns the collection template repostories for a given SCC connection instance. */
  "scc.list_templates": {
    parameters: {
      path: {
        connection_id: string;
      };
      query: {
        tag?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v1ListTemplatesResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Delete account. */
  "tenant.delete_account": {
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v2DeleteAccountResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** List policies. */
  "policy.list_policy": {
    parameters: {
      query: {
        "page.size"?: number;
        "page.token"?: string;
        "filter.name_starts_with"?: string;
        "filter.name_equals"?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v2ListPolicyResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Create a policy. */
  "policy.create_policy": {
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v2CreatePolicyResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["v2Policy"];
      };
    };
  };
  /** Verifies if given policy name is available. */
  "policy.policy_available": {
    parameters: {
      path: {
        name: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v2PolicyNameAvailableResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Get policy by its ID. */
  "policy.get_policy": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v2GetPolicyResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Remove policy. */
  "policy.delete_policy": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v2DeletePolicyResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Update a policy. */
  "policy.update_policy": {
    parameters: {
      path: {
        "policy.id": string;
      };
      query: {
        "fields.mask"?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v2UpdatePolicyResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["v2Policy"];
      };
    };
  };
  /** Set policy state by its ID. */
  "policystate.set_policy_state": {
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v2SetPolicyStateResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["v2PolicyState"];
      };
    };
  };
  /** Get policy state by its ID. */
  "policystate.get_policy_state": {
    parameters: {
      path: {
        policy_id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v2GetPolicyStateResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Delete tenant. */
  "tenant.delete_tenant": {
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v2DeleteTenantResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
}

export interface external {}
